// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// lm_qr
List lm_qr(NumericMatrix& Xr, NumericMatrix& y);
RcppExport SEXP _tmax_lm_qr(SEXP XrSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(lm_qr(Xr, y));
    return rcpp_result_gen;
END_RCPP
}
// max_t
double max_t(NumericMatrix& Xr, NumericVector& y);
RcppExport SEXP _tmax_max_t(SEXP XrSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(max_t(Xr, y));
    return rcpp_result_gen;
END_RCPP
}
// max_t_mul_boot
List max_t_mul_boot(NumericMatrix& Xr, NumericVector& y, NumericMatrix& normmat, int sandwich, int nboot);
RcppExport SEXP _tmax_max_t_mul_boot(SEXP XrSEXP, SEXP ySEXP, SEXP normmatSEXP, SEXP sandwichSEXP, SEXP nbootSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type normmat(normmatSEXP);
    Rcpp::traits::input_parameter< int >::type sandwich(sandwichSEXP);
    Rcpp::traits::input_parameter< int >::type nboot(nbootSEXP);
    rcpp_result_gen = Rcpp::wrap(max_t_mul_boot(Xr, y, normmat, sandwich, nboot));
    return rcpp_result_gen;
END_RCPP
}
// max_t_mul_boot_by_k
List max_t_mul_boot_by_k(NumericMatrix& Xr, NumericVector& y, NumericMatrix& normmat, int sandwich, int nboot, NumericMatrix& ind_mat, Nullable<NumericVector> individual_);
RcppExport SEXP _tmax_max_t_mul_boot_by_k(SEXP XrSEXP, SEXP ySEXP, SEXP normmatSEXP, SEXP sandwichSEXP, SEXP nbootSEXP, SEXP ind_matSEXP, SEXP individual_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type normmat(normmatSEXP);
    Rcpp::traits::input_parameter< int >::type sandwich(sandwichSEXP);
    Rcpp::traits::input_parameter< int >::type nboot(nbootSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type ind_mat(ind_matSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type individual_(individual_SEXP);
    rcpp_result_gen = Rcpp::wrap(max_t_mul_boot_by_k(Xr, y, normmat, sandwich, nboot, ind_mat, individual_));
    return rcpp_result_gen;
END_RCPP
}
// inverse_C
NumericMatrix inverse_C(NumericMatrix& xx, int N);
RcppExport SEXP _tmax_inverse_C(SEXP xxSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(inverse_C(xx, N));
    return rcpp_result_gen;
END_RCPP
}
// cov_mat_C
NumericMatrix cov_mat_C(NumericMatrix& Xr);
RcppExport SEXP _tmax_cov_mat_C(SEXP XrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type Xr(XrSEXP);
    rcpp_result_gen = Rcpp::wrap(cov_mat_C(Xr));
    return rcpp_result_gen;
END_RCPP
}
// true_max_t
List true_max_t(NumericMatrix& xtx, NumericMatrix& Xr, NumericVector& y, NumericVector& beta_true, NumericMatrix& ind_mat);
RcppExport SEXP _tmax_true_max_t(SEXP xtxSEXP, SEXP XrSEXP, SEXP ySEXP, SEXP beta_trueSEXP, SEXP ind_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type xtx(xtxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type beta_true(beta_trueSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type ind_mat(ind_matSEXP);
    rcpp_result_gen = Rcpp::wrap(true_max_t(xtx, Xr, y, beta_true, ind_mat));
    return rcpp_result_gen;
END_RCPP
}
// residual
NumericVector residual(NumericMatrix& Xr, NumericVector& beta, NumericVector& y);
RcppExport SEXP _tmax_residual(SEXP XrSEXP, SEXP betaSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(residual(Xr, beta, y));
    return rcpp_result_gen;
END_RCPP
}
// QR
List QR(NumericMatrix& Xr);
RcppExport SEXP _tmax_QR(SEXP XrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type Xr(XrSEXP);
    rcpp_result_gen = Rcpp::wrap(QR(Xr));
    return rcpp_result_gen;
END_RCPP
}
// compute_qb
NumericVector compute_qb(NumericMatrix& Xr, NumericVector& tau, NumericVector& b);
RcppExport SEXP _tmax_compute_qb(SEXP XrSEXP, SEXP tauSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_qb(Xr, tau, b));
    return rcpp_result_gen;
END_RCPP
}
// compute_b
NumericVector compute_b(NumericMatrix& Xr, NumericVector& b);
RcppExport SEXP _tmax_compute_b(SEXP XrSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_b(Xr, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tmax_lm_qr", (DL_FUNC) &_tmax_lm_qr, 2},
    {"_tmax_max_t", (DL_FUNC) &_tmax_max_t, 2},
    {"_tmax_max_t_mul_boot", (DL_FUNC) &_tmax_max_t_mul_boot, 5},
    {"_tmax_max_t_mul_boot_by_k", (DL_FUNC) &_tmax_max_t_mul_boot_by_k, 7},
    {"_tmax_inverse_C", (DL_FUNC) &_tmax_inverse_C, 2},
    {"_tmax_cov_mat_C", (DL_FUNC) &_tmax_cov_mat_C, 1},
    {"_tmax_true_max_t", (DL_FUNC) &_tmax_true_max_t, 5},
    {"_tmax_residual", (DL_FUNC) &_tmax_residual, 3},
    {"_tmax_QR", (DL_FUNC) &_tmax_QR, 1},
    {"_tmax_compute_qb", (DL_FUNC) &_tmax_compute_qb, 3},
    {"_tmax_compute_b", (DL_FUNC) &_tmax_compute_b, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_tmax(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
